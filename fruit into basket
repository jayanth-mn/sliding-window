/*
    Time complexity: O(n)
    Space complexity: O(c)

    Where 'n' is the number of fruit trees and 'c' is constant.
*/

import java.util.HashMap;
public class Solution {
    public static int findMaxFruits(int []arr, int n) {
        // Start and End of sliding window
        int start = 0, end = 0;
        int maxFruits = 0;

        // Contain unique elements in the current window mapped with their frequency in that window
        HashMap<Integer, Integer> elements = new HashMap<>();

        // Finding maximum length of array having atmost 2 distinct element.
        while (end < n) {
            if (elements.containsKey(arr[end]) || elements.size() < 2) {
                elements.put(arr[end], elements.getOrDefault(arr[end], 0) + 1);
                end++;
                maxFruits = Math.max(maxFruits, end - start);
            }
            else {
                elements.put(arr[start], elements.get(arr[start]) - 1);
                if (elements.get(arr[start]) == 0) {
                    elements.remove(arr[start]);
                }
                start++;
            }
        }

        return maxFruits;
    }
}
